(function() {
  'use strict';
  angular
    .module("api.service", [
      "ngResource",
      "ionic",
      "app.routes",
      "userSession",
      "fb.auth.module"
    ])
    .constant("apiUrl", "http://localhost:1234")
    .service("grApiService", grApiService);

  grApiService.$inject = [
    "apiUrl",
    "$log",
    "$state",
    "$resource",
    "authCallbackService",
    "signupCallbackService",
    "listReceiptsCallbackService",
    "accountCallbackService",
    "saveReceiptCallbackService",
    "sendReceiptCallbackService",
    "fbService"];

  function grApiService(
                        apiUrl,
                        $log,
                        $state,
                        $resource,
                        authCallbackService,
                        signupCallbackService,
                        listReceiptsCallbackService,
                        accountCallbackService,
                        saveReceiptCallbackService,
                        sendReceiptCallbackService,
                        fbService) {
    // grApiService
    // ------------

    //Usage
    //

    $log.info("api.service initialized");

    var service = this;
    service.urls = {
      sign_in: apiUrl + "/users/sign_in.json",
      sign_up: apiUrl + "/users.json",
      receipts: _receiptsUrl,
      delete_receipt: _receiptsUrl,
      list_receipts: _listReceiptsUrl,
      send_receipts: _receiptsUrl,
      companies: {
        get: apiUrl + "/companies.json",
        new: apiUrl + "/companies.json"
      }
    };

    service.signin = signin;
    service.signup = signup;
    service.listReceipts = listReceipts;
    service.saveReceipt = saveReceipt;
    service.sendReceipt = sendReceipt;
    service.deleteReceipt = deleteReceipt;
    service.accountDetails = accountDetails;
    service.companies = companies;
    service.companies_new = companies_new;
    service.editAccount = editAccount;
    service.fbLogin = fbLogin;

    return service;

    ////////////////////////

    function signin(email, password) {
      var user = {
        user: {
          email: email,
          password: password
        }
      };
      var res = $resource(service.urls.sign_in);
      return res.save({}, user)
          .$promise.then(
            function (response) {
              service.companies();
              authCallbackService.signinSuccess(response);
            },
            function (error) {
              authCallbackService.signinFailure(error);
            }
          );
      }

    function signup(signup_details) {

      var res = $resource(service.urls.sign_up);
      return res.save({}, signup_details)
        .$promise.then(
          function (response) {
            signupCallbackService.signupSuccess(response);
          },
          function (error) {
            signupCallbackService.signupFailure(error);
          }
        );
    }

    function listReceipts(id){
      if(id === undefined){
        return $state.go("tab.account-new");
      }
      var res = $resource(service.urls.list_receipts(id));
      return res.query()
        .$promise.then(
          function (response) {
            listReceiptsCallbackService.listReceiptSuccess(response);
          },
          function (error) {
            listReceiptsCallbackService.listReceiptFailure(error);
          }
      );
    }

    function saveReceipt(id, receipt){
          var res = $resource(service.urls.list_receipts(id));
          return res.save({"receipt":receipt})
            .$promise.then(
              function (response) {
                saveReceiptCallbackService.saveReceiptSuccess(response);
              },
              function (error) {
                saveReceiptCallbackService.saveReceiptFailure(error);
              }
          );
        }

    function sendReceipt(comp_id, rec_id){
      var res = $resource(service.urls.send_receipts(comp_id, rec_id, true));
      return res.get()
        .$promise.then(
          function (response) {
            sendReceiptCallbackService.sendReceiptSuccess(response);
          },
          function (error) {
            sendReceiptCallbackService.sendReceiptFailure(error);
          }
        );
    }

    function editAccount(id, account){
      var res = $resource(apiUrl+"/companies/"+id+".json", null,
        {
          'update': { method:'PUT'}
        });

      return res.update(account)
        .$promise.then(
          function (response) {
            accountCallbackService.accountSuccess(response);
          },
          function (error) {
            accountCallbackService.accountSuccess(error);
          }
        );
    }

    function deleteReceipt(comp_id, rec_ip){
      var res = $resource(service.urls.delete_receipt(comp_id, rec_ip));
      return res.delete()
        .$promise.then(
          function (response) {
            $log.info("deleteRecept success", response);
            //listReceiptsCallbackService.listReceiptSuccess(response);
          },
          function (error) {
            listReceiptsCallbackService.listReceiptFailure(error);
          }
        );
    }

    function accountDetails(){
      var res = $resource(service.urls.companies.get);
      return res.get()
        .$promise.then(
          function (response) {
            accountCallbackService.accountSuccess(response);
          },
          function (error) {
            accountCallbackService.accountFailure(error);
          }
        );
    }

    function companies(){
      service.accountDetails();
    }

    function companies_new(company){
      var res = $resource(service.urls.companies.new);
      return res.save(company)
        .$promise.then(
          function (response) {
            accountCallbackService.accountSuccess(response);
          },
          function (error) {
            accountCallbackService.accountFailure(error);
          }
        );
    }

    function accountUpload(){
      return service.accountDetailsResource.get()
        .$promise.then(
          function (response) {
            accountCallbackService.accountSuccess();
          },
          function (error) {
            accountCallbackService.accountFailure(error);
          }
        );
    }

    function fbLogin(){
      return fbService.fb_login();
    }


    function _receiptsUrl(id, rec_id, resend) {
      var format = ".json";
      if(resend != undefined){
        format = "/resend"+format;
      }
      return _listReceiptsUrl(id, true) + "/" + rec_id + format;
    }

    function _listReceiptsUrl(id, no_json) {
      if(no_json){
        return apiUrl + "/companies/" + id + "/receipts";
      }
      return apiUrl + "/companies/" + id + "/receipts.json";
    }
  }


})();
